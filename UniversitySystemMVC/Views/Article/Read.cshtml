@model UniversitySystemMVC.ViewModels.ArticlesVM.ArticlesReadVM

@{
    ViewBag.Title = "Read";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*<h2>@Model.Title</h2>*@

<section id="articles" class="row">
    <article>
        <header>
            <h2>@Model.Title</h2>
            <p>Added by @Model.User.FirstName @Model.User.LastName</p>
            <p class="article-date">Created: @Model.DateCreated</p>
            <p class="article-date">Last modified: @Model.DateModified</p>
        </header>

        <p class="article-content">@Model.Content</p>

        @* <<<<<<<<< LIKES >>>>>>>>>> *@
        <div class="likes-container row">
            <button id="like-subject-@Model.Id" class="button-like pull-left" data-article="@Model.Id" data-state="@Model.LikeState" data-likescount="@Model.Likes.Count">
                @if (Model.LikeState == 0)
                {
                    <img src="~/Content/images/like.png" alt="Like" />
                }
                else
                {
                    <img src="~/Content/images/unlike.png" alt="Unlike" />
                }
            </button>
            <p id="like-subject-@Model.Id-info" class="pull-left">@Model.Likes.Count <a href="#" data-toggle="modal" data-target="#likes">people</a> like this</p>
        </div>

        <div class="comment-container" id="comment-container-@Model.Id">
            <div class="well">

                <div class="comments" id="comments">
                    <h4>Comments</h4>
                    @if (Model.Comments.Count > 0)
                    {
                        foreach (var c in Model.Comments.OrderByDescending(x => x.DateCreated))
                        {
                            if (c.CommentId == null)
                            {
                                <div class="comment-entry" id="comment-@c.Id">
                                    <header>
                                        <h5 class="pull-left"><span class="ui-icon ui-icon-comment pull-left"></span><strong id="title-comment-@c.Id" data-comment="@c.Id">@c.Title</strong></h5>
                                        @if (@c.UserId == UniversitySystemMVC.Models.AuthenticationManager.LoggedUser.Id &&
                                            c.UserType == UniversitySystemMVC.Models.AuthenticationManager.UserType)
                                        {
                                            <div class="pull-right">
                                                <button class="btn btn-xs btn-primary btn-edit-comment" data-comment="@c.Id">Edit</button> |
                                                <button class="btn btn-xs btn-danger btn-delete-comment" data-comment="@c.Id">Delete</button> |
                                                <button class="btn btn-xs btn-primary btn-reply-comment" data-comment="@c.Id">Reply</button>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="pull-right">
                                                <button class="btn btn-xs btn-primary btn-reply-comment" data-comment="@c.Id">Reply</button>
                                            </div>
                                        }
                                    </header>

                                    <p class="comment-creator">Added by: @c.FullName</p>
                                    <p class="comment-date">Created: @UniversitySystemMVC.Extensions.CalculateRelativeTime.Calculate(c.DateCreated)</p>
                                    <p class="comment-date">Last modified: @UniversitySystemMVC.Extensions.CalculateRelativeTime.Calculate(c.DateModified)</p>

                                    <p class="comment-content">@c.Content</p>

                                    @foreach (var childC in Model.Comments.OrderByDescending(x => x.DateCreated))
                                    {
                                        if (childC.CommentId == c.Id)
                                        {
                                            <div class="comment-entry comment-entry-child" id="comment-@childC.Id">
                                                <header>
                                                    <h5 class="pull-left"><span class="ui-icon ui-icon-comment pull-left"></span><strong id="title-comment-@childC.Id" data-comment="@childC.Id">@childC.Title</strong></h5>
                                                    @if (@childC.UserId == UniversitySystemMVC.Models.AuthenticationManager.LoggedUser.Id &&
                                            childC.UserType == UniversitySystemMVC.Models.AuthenticationManager.UserType)
                                                    {
                                                        <div class="pull-right">
                                                            <button class="btn btn-xs btn-primary btn-edit-comment" data-comment="@childC.Id">Edit</button> |
                                                            <button class="btn btn-xs btn-danger btn-delete-comment" data-comment="@childC.Id">Delete</button>
                                                        </div>
                                                    }
                                                </header>

                                                <p class="comment-creator">Replied by: @childC.FullName</p>
                                                <p class="comment-date">Created: @UniversitySystemMVC.Extensions.CalculateRelativeTime.Calculate(childC.DateCreated)</p>
                                                <p class="comment-date">Last modified: @UniversitySystemMVC.Extensions.CalculateRelativeTime.Calculate(childC.DateModified)</p>

                                                <p class="comment-content">@childC.Content</p>
                                            </div>
                                        }
                                    }

                                </div>
                            }
                        }
                    }
                </div>

                <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#comment-add-@Model.Id" aria-expanded="false" id="add-comment-toggle">
                    Add Comment
                </button>

                <div class="collapse comment-container" id="comment-add-@Model.Id">
                    <h3>Add a comment</h3>
                    @using (Ajax.BeginForm("CreateComment", "Comment", new AjaxOptions { InsertionMode = InsertionMode.InsertAfter, UpdateTargetId = "comments" }))
                    {
                        @Html.LabelFor(x => x.Title)
                        @Html.TextBox("Title", "", new { @class = "form-control" })
                        @Html.LabelFor(x => x.Content)
                        @Html.TextArea("Content", "", new { @class = "form-control" })

                        @Html.HiddenFor(model => model.Id)
                        if (Model.User != null)
                        {
                            Html.Hidden("UserId", Model.User.Id);
                        }
                        @Html.Hidden("UserType", UniversitySystemMVC.Models.AuthenticationManager.UserType)

                        <input type="submit" class="btn btn-block add-comment-btn" value="Add comment" id="submit-comment" />
                    }

                </div>
            </div>
        </div>

    </article>
</section>

@*Modal - Likes*@


<div class="modal fade" id="likes" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content">
            
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">People who like "@Model.Title"</h4>
            </div>

            <div class="modal-body">
                <ul>
                    @foreach (var like in Model.Likes.OrderByDescending(l => l.DateCreated))
                    {
                        <li>@like.FullName - @like.UserType - @UniversitySystemMVC.Extensions.CalculateRelativeTime.Calculate(like.DateCreated)</li>
                    }
                </ul>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>

        </div>
        
    </div>
</div>

<script src="~/Scripts/likes.js"></script>
<script>
    $(function () {
        document.getElementById('submit-comment').addEventListener('click', function (e) {

            var serviceURL = '/Comment/CreateComment';

            var title = $("#Title").val();
            var content = $("#Content").val();
            var parentId = $("#parentId").val();

            $.ajax({
                type: "POST",
                url: serviceURL,
                data: "{articleId:'@Model.Id',userId:'@Model.UserId',title:'" + title + "',content:'" + content + "',userType:'@UniversitySystemMVC.Models.AuthenticationManager.UserType',parentId:'" + parentId + "'}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: successFunc,
                error: errorFunc
            });

            function successFunc(data, status) {
                var appendComment = "";
                if (parentId != null) {
                    appendComment += '<div style="display:none" class="comment-entry comment-entry-child" id="comment-' + data.Id + '">';
                }
                else {
                    appendComment += '<div style="display:none" class="comment-entry" id="comment-' + data.Id + '">';
                }
                appendComment += '<header>';
                appendComment += '<h5 class="pull-left"><span class="ui-icon ui-icon-comment pull-left"></span><strong>' + data.Title + '</strong></h5>';
                //appendComment += '<div class="pull-right">Edit | Delete</div>';
                appendComment += '</header>';
                appendComment += '<p class="comment-creator">Added by: ' + data.Name + '</p>';
                appendComment += '<p class="comment-date">Created: ' + data.DateCreated + '</p>';
                appendComment += '<p class="comment-date">Last modified: ' + data.DateModified + '</p>';
                appendComment += '<p class="comment-content">' + data.Content + '</p>';
                appendComment += '</div>';

                if (parentId != null) {
                    $("#comment-" + data.ParentId).append(appendComment)
                }
                else {
                    $('#comments').append(appendComment);
                }


                $('#comment-' + data.Id).slideDown();

                $("#Title").val('');
                $("#Content").val('');
            }

            function errorFunc() {
                alert('error');
            }
        });

        var editBtns = document.getElementsByClassName('btn-edit-comment');

        var showEditView = function () {
            var commentId = this.getAttribute("data-comment");

            var commentContent = $("#comment-" + commentId + " .comment-content").html();
            var titleContent = $("#title-comment-" + commentId).html();

            var appendedTitleTextBox = '<div id="edit-title-' + commentId + '">';
            appendedTitleTextBox += '<input type="text" id="Title" name="Title" value="' + titleContent + '" />';
            appendedTitleTextBox += '</div>';
            $("#comment-" + commentId + " header").hide();
            $("#comment-" + commentId + " header").after(appendedTitleTextBox);

            var appendedContentTextbox = '<div id="edit-comment-' + commentId + '-container">';
            appendedContentTextbox += '<textarea class="form-control" cols="20" id="Content" name="Content" rows="2">' + commentContent + '</textarea>';
            appendedContentTextbox += '<input type="hidden" name="Id" value="' + commentId + '" />';
            appendedContentTextbox += '</div>';

            $("#comment-" + commentId + " .comment-content").after(appendedContentTextbox);

            var appendedEditBtn = '<button class="btn btn-edit-submit" id="edit-comment-' + commentId + '" data-comment="' + commentId + '">Edit</button>';
            $("#comment-" + commentId + " #Content").after(appendedEditBtn);

            $("#comment-" + commentId + " .comment-content").hide();

            document.getElementById('edit-comment-' + commentId).addEventListener('click', editComment, false);
        };

        for (var i = 0; i < editBtns.length; i++) {
            editBtns[i].addEventListener('click', showEditView, false);
        }

        function editComment() {
            var commentId = this.getAttribute("data-comment");

            var serviceURL = '/Comment/EditComment';

            var content = $("#edit-comment-" + commentId + "-container #Content").val();
            var title = $("#comment-" + commentId + " #Title").val();

            if (title.length > 3 && content.length > 3) {
                $.ajax({
                    type: "POST",
                    url: serviceURL,
                    data: "{commentId:'" + commentId + "',title:'" + title + "',content:'" + content + "'}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: successFunc,
                    error: errorFunc
                });

                function successFunc(data, status) {
                    $("#edit-comment-" + commentId + "-container").hide();
                    $("#edit-title-" + commentId).hide();
                    $("#comment-" + commentId + " header").show();
                    $("#title-comment-" + commentId).html(title);
                    $("#comment-" + commentId + " .comment-content").html(content);
                    $("#comment-" + commentId + " .comment-content").show();
                }

                function errorFunc() {
                    alert('error');
                }
            }
            else {
                alert('Title and Content of the comment must be at least 3 symbols ... fix this ugly alert later!');
            }
        };

        // Deleting Comments
        var deleteBtns = document.getElementsByClassName('btn-delete-comment');

        function deleteComment() {
            var commentId = this.getAttribute("data-comment");

            var serviceURL = '/Comment/DeleteComment';

            $.ajax({
                type: "POST",
                url: serviceURL,
                data: "{commentId:'" + commentId + "'}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: successFunc,
                error: errorFunc
            });

            function successFunc(data, status) {
                $("#comment-" + commentId).remove();
            }

            function errorFunc() {
                alert('error');
            }
        }

        for (var i = 0; i < deleteBtns.length; i++) {
            deleteBtns[i].addEventListener('click', deleteComment, false);
        }

        // Replying Comments
        var replyBtns = document.getElementsByClassName('btn-reply-comment');

        function showReplyView() {
            $("#parentId").remove();

            // to make it good

            var parentId = this.getAttribute("data-comment");

            $('#add-comment-toggle').click();
            setTimeout( function() {
                document.getElementById("comment-add-"+@Model.Id).scrollIntoView();
            }, 800 );

            var hiddenParent = '<input type="hidden" name="parentId" id="parentId" value="' + parentId + '"/>';
            $("#comment-add-"+@Model.Id + " form").append(hiddenParent);

        }

        for (var i = 0; i < replyBtns.length; i++) {
            replyBtns[i].addEventListener('click', showReplyView, false);
        }
    });
</script>